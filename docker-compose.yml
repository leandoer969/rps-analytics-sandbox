version: "3.9"

name: rps-analytics-sandbox

services:
  postgres:
    image: postgres:16
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rps}
      POSTGRES_USER: ${POSTGRES_USER:-rps_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-rps_password}
    ports:
      - "5432:5432"
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d:ro
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -U $${POSTGRES_USER} -d $${POSTGRES_DB}",
        ]
      interval: 5s
      timeout: 3s
      retries: 30
    restart: unless-stopped

  # One-shot job to (re)apply schema safely (DDL uses IF NOT EXISTS)
  db-init:
    image: postgres:16
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-rps_password}
    volumes:
      - ./db/init:/schema:ro
    # Use array form so every arg is explicit; forces TCP to the 'postgres' host.
    entrypoint:
      [
        "psql",
        "-h",
        "postgres",
        "-p",
        "5432",
        "-U",
        "${POSTGRES_USER:-rps_user}",
        "-d",
        "${POSTGRES_DB:-rps}",
        "-v",
        "ON_ERROR_STOP=1",
        "-f",
        "/schema/01_schema.sql",
      ]

  # Data generator (Python) – builds locally
  generator:
    build:
      context: ./generator
    env_file: .env
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-rps}
      POSTGRES_USER: ${POSTGRES_USER:-rps_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-rps_password}
    depends_on:
      postgres:
        condition: service_healthy

  # dbt (Postgres adapter) – local image to avoid arm64 pull issues
  dbt:
    build:
      context: ./dbt
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      DBT_PROFILES_DIR: /app
      POSTGRES_HOST: postgres
    volumes:
      - ./dbt:/app

  # Streamlit dashboards
  streamlit:
    build:
      context: ./streamlit
    env_file: .env
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8501:8501"
    volumes:
      - ./streamlit:/app

  # Optional BI UI (uses its own H2 by default; connect to Postgres in UI)
  metabase:
    image: metabase/metabase:v0.50.26
    container_name: ${PROJECT:-rps-analytics-sandbox}-metabase
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_HOST: postgres
      MB_DB_PORT: 5432
      MB_DB_DBNAME: metabase
      MB_DB_USER: rps_user
      MB_DB_PASS: rps_password
      JAVA_TOOL_OPTIONS: -Xms256m -Xmx1024m
    depends_on:
      - postgres
    healthcheck:
      test:
        ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 3s
      retries: 30

volumes:
  pgdata:
